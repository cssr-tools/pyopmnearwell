<%
import math as mt
%>-- Copyright (C) 2023 NORCE
-- This deck was generated by pyopmnearwell https://github.com/cssr-tools/pyopmnearwell
----------------------------------------------------------------------------
RUNSPEC
----------------------------------------------------------------------------
DIMENS 
% if dic['grid']=='core':
${dic['nocells'][0]} ${dic['nocells'][1]} ${dic['nocells'][2]} /
% else:
${max(dic['nocells'][0],dic['nocells'][1])} ${dic['nocells'][1]} ${dic['nocells'][2]} /
% endif

OIL
GAS
VAPOIL
DIFFUSE

METRIC

START
1 JAN 2000 /
% if dic['grid']=='radial':

RADIAL
% endif

EQLDIMS
/

TABDIMS
${f"{(1*(dic['hysteresis']!=0)+1)*(dic['satnum']+dic['perforations'][0])} /" if (1*(dic["hysteresis"]!=0)+1)*(dic['satnum']+dic['perforations'][0])>1 else "/"}
% if dic["hysteresis"]!=0:

SATOPTS
HYSTER /
% endif

WELLDIMS
6 ${dic['nocells'][2]} 6 6 /

UNIFOUT
----------------------------------------------------------------------------
GRID
----------------------------------------------------------------------------
% if dic['write']==1:
INIT
% else:
GRIDFILE 
0 0 /
% endif
% if dic["fluxnum"]:

INCLUDE
FLUXNUM.INC /
% endif

INCLUDE
GEOLOGY.INC /
% if dic["pvmult"]>0:
----------------------------------------------------------------------------
EDIT
----------------------------------------------------------------------------
INCLUDE
MULTPV.INC /
% endif
----------------------------------------------------------------------------
PROPS
----------------------------------------------------------------------------
DIFFC
16.043 2.016 6.2726 6.2726 /

-- Standard temperature: 288.71 K, 15.56 Â°C
-- Standard pressure: 1.013250 bar
-- Fluid properties from CoolProp, doi/abs/10.1021/ie4033999
-- CH4 WATER H2
DENSITY
0.6785064 999.70 0.0850397 /

ROCK
40 4.3e-5 /

-- Methane as dead oil fluid type
-- Pressure[bar] FVF[-] Viscosity[cP]
PVDO
39.95 0.0270783155 0.0126098701
40.00 0.0270428829 0.01261087
40.05 0.0270075391 0.0126118705
40.10 0.0269722838 0.0126128714
/ 
--  Hydrogen as a wet gas fluid type
--  Pressure[bar] RV[-] FVF[-]  Viscosity[cP] 
PVTG
39.95 1.0 0.029007223 0.0094358857
      0.5 0.029007223 0.0094358857
      0.0 0.029007223 0.0094358857
/ 
40.0 1.010 0.0289717643 0.0094359307
     0.501 0.0289717643 0.0094359307
     0.000 0.0289717643 0.0094359307
/ 
40.05 1.0 0.0289363942 0.0094359758
      0.5 0.0289363942 0.0094359758
      0.0 0.0289363942 0.0094359758
/ 
40.1 1.0 0.0289011123 0.0094360209
     0.5 0.0289011123 0.0094360209
     0.0 0.0289011123 0.0094360209
/
/

INCLUDE
TABLES.INC /

% if dic["hysteresis"]!=0:
EHYSTR
1* ${0 if dic["hysteresis"].upper()=="CARLSON" else 2} 2* BOTH /
% endif
% if dic["salinity"]>0:

SALINITY
${dic["salinity"]} /
% endif
% if dic["hysteresis"]!=0 or dic["fluxnum"]:
----------------------------------------------------------------------------
REGIONS
----------------------------------------------------------------------------
% if dic["hysteresis"]!=0 and dic["fluxnum"]:
COPY
FLUXNUM SATNUM /
FLUXNUM IMBNUM /
/

ADD
IMBNUM ${len(dic["rock"])} /
/
% elif dic["fluxnum"]:
COPY
FLUXNUM SATNUM /
/
% else:
IMBNUM
${dic['nocells'][0]*dic['nocells'][1]*dic['nocells'][2]}*2 /
% endif
% endif
----------------------------------------------------------------------------
SOLUTION
----------------------------------------------------------------------------
EQUIL
0 ${dic['pressure']} ${mt.floor((1-dic["initialphase"])*dic['dims'][2])} 0 0 0 1 1 0 /

RTEMPVD
${"".join([' ' for _ in range(len(str(dic['dims'][2]))-1)])}0 ${dic['temperature'][0]}
${dic['dims'][2]} ${dic['temperature'][1]} /

RVVD
${"".join([' ' for _ in range(len(str(dic['dims'][2]))-1)])}0 0
${dic['dims'][2]} 0 /

RV
${dic['nocells'][0]*dic['nocells'][1]*dic['nocells'][2]}*0 /
% if dic['write']==1:

RPTRST 
BASIC=2 DEN /
% endif
----------------------------------------------------------------------------
SUMMARY
----------------------------------------------------------------------------
PERFORMA
FPR 
FGIP
FOIP
FGIR
FOIR
FGIT
FGPT
FOIT
WGIR
/
WGPR
/
WGIT
/
WGPT
/
WBHP
/
RPR
/
ROIP
/
RGIP
/
WOPR
/
WPI
/
----------------------------------------------------------------------------
SCHEDULE
----------------------------------------------------------------------------
% if dic['write']==1:
RPTRST
BASIC=2 DEN /

% endif
WELSPECS
% if dic['grid']=='core':
INJ0 G1 1 ${1+mt.floor(dic['nocells'][2]/2)} 1* GAS 2* STOP ${'NO' if dic["xflow"]>0 else ''} /
PRO0 G1 1 ${1+mt.floor(dic['nocells'][2]/2)} 1* GAS 2* STOP ${'NO' if dic["xflow"]>0 else ''} /
% else:
INJ0 G1 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1* GAS 2* STOP ${'NO' if dic["xflow"]>0 else ''} /
PRO0 G1 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1* GAS 2* STOP ${'NO' if dic["xflow"]>0 else ''} /
% endif
% if dic["pvmult"]==0 or dic['grid']=='core':
% if dic['grid']=='core':
PRO1 G1 ${dic['nocells'][0]} ${1+mt.floor(dic['nocells'][2]/2)} 1* GAS 2* STOP /
% elif dic['grid'] != 'cartesian' and dic['grid'] != 'tensor3d':
PRO1 G1 ${dic['nocells'][0]} 1 1* GAS /
% else:
PRO1 G1 1 1 1* OIL /
PRO2 G1 ${dic['nocells'][0]} 1 1* OIL /
PRO3 G1 1 ${dic['nocells'][0]} 1* OIL /
PRO4 G1 ${dic['nocells'][0]} ${dic['nocells'][0]} 1* OIL /
% endif
% endif
/
COMPDAT
% if dic["confact"]==0:
INJ0 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1 ${0*dic['nocells'][2]+1} OPEN 2* ${dic['diameter']} /
PRO0 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1 ${0*dic['nocells'][2]+1} OPEN 2* ${dic['diameter']} /
% else:
% if dic['grid']=='core':
INJ0 1 ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} OPEN 1* ${dic["confact"]} /
PRO0	1 ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} OPEN 1* ${dic["confact"]} /
% else:
INJ0 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1 ${0*dic['nocells'][2]+1} OPEN 1* ${dic["confact"]} /
PRO0 ${max(1, 1+mt.floor(dic['nocells'][1]/2))} ${max(1, 1+mt.floor(dic['nocells'][1]/2))} 1 ${0*dic['nocells'][2]+1} OPEN 1* ${dic["confact"]} /
% endif
% endif
% if dic["pvmult"]==0 or dic['grid']=='core':
% if dic['grid']=='core':
PRO1 ${dic['nocells'][0]} ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} ${1+mt.floor(dic['nocells'][2]/2)} OPEN 1* ${dic["confact"]} /
% elif dic['grid'] != 'cartesian' and dic['grid'] != 'tensor3d':
PRO1 ${dic['nocells'][0]} 1 1 ${0*dic['nocells'][2]+1} OPEN 2* ${dic['diameter']} /
% else:
PRO1 1 1 1 ${dic['nocells'][2]} OPEN 2* ${dic['diameter']} /
PRO2 ${dic['nocells'][0]} 1 1 ${dic['nocells'][2]} OPEN 2* ${dic['diameter']} /
PRO3 1 ${dic['nocells'][0]} 1 ${dic['nocells'][2]} OPEN 2* ${dic['diameter']} /
PRO4 ${dic['nocells'][0]} ${dic['nocells'][0]} 1 ${dic['nocells'][2]} OPEN 2* ${dic['diameter']} /
% endif
% endif
/
% for j in range(len(dic['inj'])):

% if dic["tuning"]:
TUNING
1E-02 ${dic['inj'][j][2]} 1E-10 2* 1E-12 /
/
/
% endif
WCONINJE
% if dic['inj'][j][3]>0:
INJ0 GAS ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} RATE ${f"{dic['inj'][j][4] / 0.0850397:E}"} 1* 480 /
% else:
INJ0 OIL ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} RATE ${f"{dic['inj'][j][4] / 0.6785064:E}"} 1* 480 /
% endif
/
WCONPROD
PRO0 ${'OPEN' if dic['inj'][j][4] < 0 else 'SHUT'} GRAT 2* ${f"{abs(dic['inj'][j][4]) / 0.0850397:E}"} 2* ${dic['inj'][j][5] if dic['inj'][j][4] < 0 else ''} /
% if dic['grid']=='core':
PRO1 OPEN BHP 5* ${dic['pressure']} /
% endif
% if dic["pvmult"]==0:
% if dic['grid']=='cartesian' or dic['grid']=='tensor3d':
PRO1 ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} BHP 5* ${dic['pressure']} /
PRO2 ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} BHP 5* ${dic['pressure']} /
PRO3 ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} BHP 5* ${dic['pressure']} /
PRO4 ${'OPEN' if dic['inj'][j][4]>0 else 'SHUT'} BHP 5* ${dic['pressure']} /
% endif
% endif
/
% if dic['econ']>0:
WECON
PRO0 1* ${f"{dic['econ']*abs(dic['inj'][j][4]) / 0.0850397:E}"} /
/
% endif
TSTEP
${f"{round(dic['inj'][j][0]/dic['inj'][j][1])}*" if round(dic['inj'][j][0]/dic['inj'][j][1])>1 else ""}${dic['inj'][j][1]} /
% endfor